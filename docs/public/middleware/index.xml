<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Middlewares on Light Ecosystem for Microservices</title>
    <link>https://networknt.github.io/middleware/</link>
    <description>Recent content in Middlewares on Light Ecosystem for Microservices</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Tue, 09 May 2017 14:36:31 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/middleware/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CORS</title>
      <link>https://networknt.github.io/middleware/cors/</link>
      <pubDate>Tue, 09 May 2017 14:36:31 -0400</pubDate>
      
      <guid>https://networknt.github.io/middleware/cors/</guid>
      <description>If you API server serves SPA(single page application) built on top of Angular or React, there is no issue for the SPA to access APIs on the same server. However, some of the single page applications are served by another server on another domain. In this case, the API server has to handle the pre-flight options request in order to allow client to access the APIs.
CorsHttpHandler This handler handles the HTTP pre-flight option request and returns the correct header to the client.</description>
    </item>
    
    <item>
      <title>Rate Limiting</title>
      <link>https://networknt.github.io/middleware/limit/</link>
      <pubDate>Fri, 17 Feb 2017 14:10:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/middleware/limit/</guid>
      <description>Although our framework can handle potential millions requests per second, for some public facing APIs, it might be a good idea to enable this handler to limit the concurrent request to certain level in order to avoid DDOS attacks.
As this handler will impact the overall performance a little bit, it is not configured as default in the light-codegen. You must select the feature to true in your light-codegen config.</description>
    </item>
    
    <item>
      <title>Request and Response Dump</title>
      <link>https://networknt.github.io/middleware/dump/</link>
      <pubDate>Mon, 06 Feb 2017 21:40:01 -0500</pubDate>
      
      <guid>https://networknt.github.io/middleware/dump/</guid>
      <description>This is a handler that dumps the entire request and response into a log file. It should only be used in development mode for debugging purpose as it is very slow.</description>
    </item>
    
    <item>
      <title>Correlation Id</title>
      <link>https://networknt.github.io/middleware/correlation/</link>
      <pubDate>Mon, 06 Feb 2017 09:59:28 -0500</pubDate>
      
      <guid>https://networknt.github.io/middleware/correlation/</guid>
      <description>This is a handler that checks if X-Correlation-Id exists in request header. If it doesn&amp;rsquo;t exist it will generate a UUID and put it into the request header. During API to API calls, this header will be passed to the next API by Client module.
Generating The correlationId is very useful in microservices architecture as there are multiple services involved in a same client request. When logs are aggregated into a centralized tool, it is very important there is an unique identifier to associate logs from multiple services for the same request.</description>
    </item>
    
    <item>
      <title>Traceability</title>
      <link>https://networknt.github.io/middleware/traceability/</link>
      <pubDate>Sun, 06 Nov 2016 10:24:22 -0500</pubDate>
      
      <guid>https://networknt.github.io/middleware/traceability/</guid>
      <description>#
For microservices architecture, a request sent from client may pass through several services to the backend respository/Book of Record and then response is returned in the reverse path. If there is an error in the call tree, we need to identify where is the problem during runtime. Also, for some mission critical applications, the entire call tree must be in the audit log to meet regulatory compliance requirement. For example, banking applications.</description>
    </item>
    
    <item>
      <title>Sanitizer</title>
      <link>https://networknt.github.io/middleware/sanitizer/</link>
      <pubDate>Sun, 23 Oct 2016 10:35:04 -0400</pubDate>
      
      <guid>https://networknt.github.io/middleware/sanitizer/</guid>
      <description>Introduction This is a middleware that addresses cross site scripting concerns. It encodes the header and body according to the configuration. As body encoding depends on Body middleware, it has to be plugged into the request/response chain after Body.
Configuration Here is the default configuration sanitizer.yml
# Sanitize request for cross site scripting during runtime # indicate if sanitizer is enabled or not enabled: true # if it is enabled, does body need to be sanitized sanitizeBody: true # if it is enabled, does header need to be sanitized sanitizeHeader: false  If enabled is false, this middleware won&amp;rsquo;t be loaded during server startup.</description>
    </item>
    
    <item>
      <title>Metrics</title>
      <link>https://networknt.github.io/middleware/metrics/</link>
      <pubDate>Sat, 15 Oct 2016 20:42:32 -0400</pubDate>
      
      <guid>https://networknt.github.io/middleware/metrics/</guid>
      <description>Introduction Metrics handler collects the API runtime information and report to Influxdb periodically (5 minutes to 15 minutes based on the volume of the API). A Grafana instance is hooked to Influxdb to output the metrics on dashboard from two different perspectives:
 Client oriented - client centric info to show how many APIs to call and each API runtime info.
 API oriented - API centric info to show how many clients is calling this API.</description>
    </item>
    
    <item>
      <title>Exception Handler</title>
      <link>https://networknt.github.io/middleware/exception/</link>
      <pubDate>Wed, 12 Oct 2016 19:03:24 -0400</pubDate>
      
      <guid>https://networknt.github.io/middleware/exception/</guid>
      <description>This is a middleware handler that should be put in the beginning of request/response chain. It wraps the entire chain so that any un-handled exceptions will finally reach here and to be handled gracefully. It is encouraged to handle exceptions in business handler because the context is clear and the exchange will be terminated at the right place.
This handler is plugged in by default from light-codegen and it should be enabled on production as the last defence line.</description>
    </item>
    
    <item>
      <title>Body Parser</title>
      <link>https://networknt.github.io/middleware/body/</link>
      <pubDate>Wed, 12 Oct 2016 18:57:17 -0400</pubDate>
      
      <guid>https://networknt.github.io/middleware/body/</guid>
      <description>Body parser is a middleware handler designed for light-rest-4j only. It will parse the body to a list or map depending on the first character of the body content if application/json is the content-type in the HTTP header for POST, PUT and PATCH HTTP methods. After the body is parsed, it will be attached to the exchange so that subsequent handlers can use it directly. In the future, other content-type might be supported if needed.</description>
    </item>
    
    <item>
      <title>Audit</title>
      <link>https://networknt.github.io/middleware/audit/</link>
      <pubDate>Wed, 12 Oct 2016 18:48:58 -0400</pubDate>
      
      <guid>https://networknt.github.io/middleware/audit/</guid>
      <description>There are two built-in audit handlers that write logs into audit.log that setup in the logback appender. End user can add more customized audit handlers if need.
In the audit module, there is AuditHandler which is a generic and configurable with audit.yml config file.
There is another audit provided by the light-4j framework called DumpHandler in dump module.
Introduction Only logs several fields from request header and the fields are configurable.</description>
    </item>
    
    <item>
      <title>Middleware Handlers</title>
      <link>https://networknt.github.io/middleware/</link>
      <pubDate>Fri, 07 Oct 2016 22:02:13 -0400</pubDate>
      
      <guid>https://networknt.github.io/middleware/</guid>
      <description>Introduction Light-4J is a Java API framework based on undertow http core which supports request and response manipulations in HttpServerExchange. Unlike servlet filter, it is very easy to add middleware handlers in the request and response chain to address all the cross-cutting concerns.
There are two types of middleware handlers: technical and contextual. All the middleware handlers provided by light-4j are technical as we don&amp;rsquo;t care about each individual service but apply the handlers blindly.</description>
    </item>
    
  </channel>
</rss>