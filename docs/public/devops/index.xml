<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Light Ecosystem for Microservices</title>
    <link>https://networknt.github.io/devops/</link>
    <description>Recent content in Devops on Light Ecosystem for Microservices</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Sun, 08 Oct 2017 07:16:31 -0400</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/devops/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Install Java JDK</title>
      <link>https://networknt.github.io/devops/java/</link>
      <pubDate>Sun, 08 Oct 2017 07:16:31 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/java/</guid>
      <description> Most of our frameworks depending on Java 8 Platform to run and here is an instruction on how to install it on Ubuntu 16.04 LTS Linux.
The steps are borrowed from http://tipsonubuntu.com/2016/07/31/install-oracle-java-8-9-ubuntu-16-04-linux-mint-18/
Install Java 8 JDK sudo apt-get install software-properties-common sudo add-apt-repository ppa:webupd8team/java sudo apt update; sudo apt install oracle-java8-installer  </description>
    </item>
    
    <item>
      <title>email</title>
      <link>https://networknt.github.io/devops/email/</link>
      <pubDate>Sun, 24 Sep 2017 15:25:24 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/email/</guid>
      <description></description>
    </item>
    
    <item>
      <title>jenkins</title>
      <link>https://networknt.github.io/devops/jenkins/</link>
      <pubDate>Sun, 24 Sep 2017 15:21:10 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/jenkins/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arango</title>
      <link>https://networknt.github.io/devops/arango/</link>
      <pubDate>Sun, 24 Sep 2017 14:51:53 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/arango/</guid>
      <description></description>
    </item>
    
    <item>
      <title>mysql</title>
      <link>https://networknt.github.io/devops/mysql/</link>
      <pubDate>Sun, 24 Sep 2017 14:51:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/mysql/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Database</title>
      <link>https://networknt.github.io/devops/database/</link>
      <pubDate>Sun, 24 Sep 2017 14:51:39 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/database/</guid>
      <description>As part of our infrastructure, we are supporting two databases: one SQL and one No-SQL. For customer who have their databases already, they should be easily supported.
 Mysql - An open source relational database. ArangoDB - An open source multiple model database with Document, Graph and KV support.  </description>
    </item>
    
    <item>
      <title>portal</title>
      <link>https://networknt.github.io/devops/portal/</link>
      <pubDate>Sun, 24 Sep 2017 14:51:26 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/portal/</guid>
      <description></description>
    </item>
    
    <item>
      <title>eventuate</title>
      <link>https://networknt.github.io/devops/eventuate/</link>
      <pubDate>Sun, 24 Sep 2017 14:51:20 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/eventuate/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Service Discovery with Consul</title>
      <link>https://networknt.github.io/devops/discovery/</link>
      <pubDate>Sun, 24 Sep 2017 14:51:00 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/discovery/</guid>
      <description>Light-4j framework supports both Consul and Zookeeper for service discovery but we prefer Consul due to some distinct features.
Here is an instruction on how to install Consul 0.9.3 on Ubuntu 16.04 LTS Linux.
The following is a list of three servers and each has 32GB memory. We want to install consul on three servers to form a production cluster.
 test1.lightapi.net test2.lightapi.net test3.lightapi.net  Install Consul We follow the official installation instructions and learned a lot details from this article</description>
    </item>
    
    <item>
      <title>metrics</title>
      <link>https://networknt.github.io/devops/metrics/</link>
      <pubDate>Sun, 24 Sep 2017 14:50:54 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/metrics/</guid>
      <description></description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://networknt.github.io/devops/logging/</link>
      <pubDate>Sun, 24 Sep 2017 14:50:47 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/logging/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Messaging</title>
      <link>https://networknt.github.io/devops/messaging/</link>
      <pubDate>Sun, 24 Sep 2017 14:50:41 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/messaging/</guid>
      <description>Light-4j framework support both synchronous request/response style and asynchronous message driven style of service to service communication. So a reliable and scalable message broker is very important in the infrastructure and we have chosen Kafka as part of our infrastructure.
For production installation, you need at least three servers to form a cluster. The following instruction is for Confluent Platform Open Source Edition v3.3
The official installation document can be found here</description>
    </item>
    
    <item>
      <title>security</title>
      <link>https://networknt.github.io/devops/security/</link>
      <pubDate>Sun, 24 Sep 2017 14:50:28 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/security/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Infrastructure Setup</title>
      <link>https://networknt.github.io/devops/infrastructure/</link>
      <pubDate>Sun, 24 Sep 2017 14:38:50 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/infrastructure/</guid>
      <description>The following components are for infrastructure to services built on top of light-*-4j frameworks.
For development The development, a docker-compose is recommended as it is very easy to get environment setup.
For production  messaging - Confluent Platform(Kafka and Zookeeper) logging - Elastic Search, Logstash and Kabana metrics - InfluxDB, Grafana discovery - Consul database - Mysql and ArangoDB security - light-oauth2 eventuate - Eventual consistency framework portal - Service management and marketplace.</description>
    </item>
    
    <item>
      <title>Manage project with both front and back end</title>
      <link>https://networknt.github.io/devops/front_back/</link>
      <pubDate>Thu, 11 May 2017 15:12:48 -0400</pubDate>
      
      <guid>https://networknt.github.io/devops/front_back/</guid>
      <description>The light-* frameworks are designed to do microservices but most services will be consumed by either mobile native application or single page application on browser.
Here is the best practice to manage the project with both font and back end.
Put both front end code and back end code into the same repo on git.  Reduced the number of repos on git Easy to link front and backend together.</description>
    </item>
    
    <item>
      <title>DevOps</title>
      <link>https://networknt.github.io/devops/</link>
      <pubDate>Wed, 25 Jan 2017 20:55:53 -0500</pubDate>
      
      <guid>https://networknt.github.io/devops/</guid>
      <description> How to build infrastructure to support microservices architecture
 How to deploy standalone microservices as Linux service
 How to deploy standalone microservices as Windows service
 How to manage project with both front and back end
  </description>
    </item>
    
    <item>
      <title>Running Light-4J Application as Linux Service</title>
      <link>https://networknt.github.io/devops/linux_service/</link>
      <pubDate>Sat, 07 Jan 2017 08:03:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/devops/linux_service/</guid>
      <description>Light-4J application can be easily started as Unix/Linux services using either init.d or systemd given it is packaged as a fatjar.
Installation as an init.d service (System V) If your application is packaged as a fatjar, and youâ€™re not using a custom script, then your application can be used as an init.d service. Simply symlink the jar to init.d to support the standard start, stop, restart and status commands.</description>
    </item>
    
    <item>
      <title>Running Light-4J Application as Windows Service</title>
      <link>https://networknt.github.io/devops/windows_service/</link>
      <pubDate>Sat, 07 Jan 2017 08:03:33 -0500</pubDate>
      
      <guid>https://networknt.github.io/devops/windows_service/</guid>
      <description>Light-4J is packaged as a fatjar and normally will be running in docker container on production; however, it can be executed on Windows or Linux host machine or VM with the following command.
java -jar filename.jar  For production deployment, you want to make sure that when you host server/VM is restarted, the application will be restarted automatically.
The following describes step-by-step how you can create a Windows service for your Light-4J application or any Java application that can be packaged in a fatjar.</description>
    </item>
    
  </channel>
</rss>