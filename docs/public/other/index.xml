<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Others on Light Ecosystem for Microservices</title>
    <link>https://networknt.github.io/other/</link>
    <description>Recent content in Others on Light Ecosystem for Microservices</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Mon, 06 Feb 2017 21:34:10 -0500</lastBuildDate>
    
	<atom:link href="https://networknt.github.io/other/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Zookeeper</title>
      <link>https://networknt.github.io/other/zookeeper/</link>
      <pubDate>Mon, 06 Feb 2017 21:34:10 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/zookeeper/</guid>
      <description>A Zookeeper registry implementation that use Zookeeper as registry and discovery server. It implements both registry and discovery in the same module for Zookeeper communication. If the API/server is delivered as docker image, another product called registrator will be used to register it with Zookeeper server. Otherwise, the server module will be responsible to register itself during startup.
Interface Here is the interface of ZooKeeper client.
public interface ZooKeeperClient { void subscribeStateChanges(IZkStateListener listener); java.</description>
    </item>
    
    <item>
      <title>Switcher</title>
      <link>https://networknt.github.io/other/switcher/</link>
      <pubDate>Mon, 06 Feb 2017 21:34:02 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/switcher/</guid>
      <description>This module implement a switcher service interface and a local implementation. Switch is useful at system runtime to turn on or off some logic or service given certain conditions. For example, the light-4j server won&amp;rsquo;t stop handling requests but just switching off during server shutdown process. The service registry will be notified but in coming requests are still processed until all clients receives notification from service registry.</description>
    </item>
    
    <item>
      <title>Service</title>
      <link>https://networknt.github.io/other/service/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:54 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/service/</guid>
      <description>A light-weight and fast dependency injection framework without any third party dependencies. It only support constructor inject and the injection is done during server startup. All the object is saved into a map and the key is the interface class. That can guarantee that only one instance of implementation is available during runtime.
Light 4J framework encourage developers to build microservices with Functional Programming Style. One of the key principle is immutability so that the code can be optimized to take advantage of multi-core CPUs.</description>
    </item>
    
    <item>
      <title>Registry</title>
      <link>https://networknt.github.io/other/registry/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:47 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/registry/</guid>
      <description>This module contains all the interfaces that are needed in registry and discovery. Also it implemented Direct registry which you can hard-code services into the service.yml in order to simulate consul or zookeeper during development.
Currently, Consul and ZooKeeper are supported for external service registry and discovery.</description>
    </item>
    
    <item>
      <title>Health Check</title>
      <link>https://networknt.github.io/other/health/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:38 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/health/</guid>
      <description>This is a server health handler that output OK to indicate the server is alive. Normally, it will be use by F5 to check if the server is health before route request to it. Another way to check server health is to ping the ip and port and it is the standard way to check server status for F5. However, the service instance is up and running doesn&amp;rsquo;t mean it is functioning.</description>
    </item>
    
    <item>
      <title>Handler</title>
      <link>https://networknt.github.io/other/handler/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:25 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/handler/</guid>
      <description>A interface for middleware handlers. All middleware handlers must implement this interface so that the handler can be plugged in to the request/response chain during server startup with SPI (Service Provider Interface). The entire light-4j framework is a core server that provides a plugin structure to hookup all sorts of plugins to handler different cross-cutting concerns.
The middleware handlers are designed based on chain of responsibility pattern.
Interface public interface MiddlewareHandler extends HttpHandler { /** * Get the next handler in the chain * * @return HttpHandler */ HttpHandler getNext(); /** * Set the next handler in the chain * * @param next HttpHandler * @return MiddlewareHandler */ MiddlewareHandler setNext(final HttpHandler next); /** * Indicate if this handler is enabled or not.</description>
    </item>
    
    <item>
      <title>Consul</title>
      <link>https://networknt.github.io/other/consul/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:14 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/consul/</guid>
      <description>A consul registry implementation that uses Consul as registry and discovery server. It implements both registry and discovery in the same module for consul communication. If the API/service is delivered as docker image, another product called registrator will be used to register it with Consul agent. Otherwise, the server module will be responsible to register itself during startup.
The reason that service itself in Docker cannot register to Consul is due to the containerized service cannot find the exposed port from Docker and this issue has been opened for a long time and it has never been resolved.</description>
    </item>
    
    <item>
      <title>Cluster</title>
      <link>https://networknt.github.io/other/cluster/</link>
      <pubDate>Mon, 06 Feb 2017 21:33:04 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/cluster/</guid>
      <description>This module caches all the service instances that are needed by the current service and calling underline registry(Direct, Consul and ZooKeeper) to discover the service if necessary (first time a service is called and registry notifies something has been changed regarding to subscribe the services on Consul or ZooKeeper).
Interface In this module, we have an interface called Cluster.java
public interface Cluster { /** * give a service name and return a url with http or https url * the result is has been gone through the load balance with request key * * requestKey is used to control the behavior of load balance except * round robin and local first which this value is null.</description>
    </item>
    
    <item>
      <title>Load Balance</title>
      <link>https://networknt.github.io/other/balance/</link>
      <pubDate>Mon, 06 Feb 2017 21:32:51 -0500</pubDate>
      
      <guid>https://networknt.github.io/other/balance/</guid>
      <description>Light-4j framework encourages client side discovery in order to avoid any proxy in front of multiple instances of services. This can reduce the network hop and subsequently reduce the latency of service call.
Client side discovery needs client side load balancer in order to pick up one and only one available service instance from a list of available services for a particular downstream request during runtime.
Currently, Round-Robin and LocalFirst are implemented and ConsistentHashing is in progress.</description>
    </item>
    
    <item>
      <title>Server Info</title>
      <link>https://networknt.github.io/other/info/</link>
      <pubDate>Sun, 23 Oct 2016 13:23:59 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/info/</guid>
      <description>Introduction Almost every module in light-4j has a configuration file that can be externalized with default can be in the module itself or the API implementation config folder. In order to give an overview of the server runtime, system properties, specification as well as configurations for each enabled modules, there is a special handler that is injected in your swagger specification. Once this handler endpoint is called, it will output all the server info in a JSON format.</description>
    </item>
    
    <item>
      <title>Other Components</title>
      <link>https://networknt.github.io/other/</link>
      <pubDate>Sun, 23 Oct 2016 13:22:33 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/</guid>
      <description>light-4j is a Java API framework based on undertow http core that supports swagger/graphql/hybrid code generation and runtime request validation and security verification.
It contains the following components:
 server is a framework on top of Undertow http core that support plugins to perform different middleware handlers. It is light-weight, fast and supports HTTP/2.
 config is a module that supports externalized yml/yaml/json configuration for standalone applications and docker containers managed by Kubernetes.</description>
    </item>
    
    <item>
      <title>Server</title>
      <link>https://networknt.github.io/other/server/</link>
      <pubDate>Sun, 23 Oct 2016 13:21:19 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/server/</guid>
      <description>This module is responsible for managing life cycle of the embedded Undertow core http server. It starts the server and initializes all middleware plugins along with route handler providers. It stops the server and allow the resources to be released even someone click CTRL+C.
Startup Hooks During server startup, a list of startup hooks will be called to initialize the context and environment for the server instance. For example, creating database connection pool etc.</description>
    </item>
    
    <item>
      <title>Status</title>
      <link>https://networknt.github.io/other/status/</link>
      <pubDate>Sun, 23 Oct 2016 13:20:51 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/status/</guid>
      <description>In the scenario that error happens on the server, a Status object is designed to encapsulate standard http response 4xx and 5xx as well as application specific error code ERRXXXXX (prefixed with ERR with another 5 digits) and error message. Additionally, an description of the error will be available for more info about the error.
Data Elements Here are the four fields in the Status object.
 int statusCode; String code; String message; String description;  Construct the object from status.</description>
    </item>
    
    <item>
      <title>Utility</title>
      <link>https://networknt.github.io/other/utility/</link>
      <pubDate>Sun, 23 Oct 2016 13:20:22 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/utility/</guid>
      <description>This module contains some useful classes that shared by multiple modules within the light-* frameworks.
Constants Contains all the constants shared by all modules.
ModuleRegistry When the plugin modules are loaded, it will register itself to this module along with configuration. When /server/info is called, the endpoint will return all plugged in modules and their configurations.
Util Some useful utility method like uuid generator etc.
CollectionUtil Utility for collection</description>
    </item>
    
    <item>
      <title>Mask</title>
      <link>https://networknt.github.io/other/mask/</link>
      <pubDate>Sun, 23 Oct 2016 13:19:36 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/mask/</guid>
      <description>In the entire life cycle of the exchange, there might a lot of logging statements written to log files or other persistence storage. These logs will be used to assist production issue identifying and resolving and a wide group of people might have access to these logs. In order to reduce the risk of leak customer info, sensitive info needs to masked before logging. For example, credit card number, sin number etc.</description>
    </item>
    
    <item>
      <title>Config</title>
      <link>https://networknt.github.io/other/config/</link>
      <pubDate>Sun, 23 Oct 2016 13:18:22 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/config/</guid>
      <description>A configuration module that supports externalized config in official standalone deployment or docker container. It is encouraged that every module should have its own configuration file and these files can be served by light-config-server which aggregates/merges config files from different level of organizations in github or other git servers.
Introduction Externalized configuration from the application package is very important. It allows us to deploy the same package to DEV/SIT/UAT/PROD environment with different configuration packages without reopening the delivery package.</description>
    </item>
    
    <item>
      <title>Client</title>
      <link>https://networknt.github.io/other/client/</link>
      <pubDate>Sun, 23 Oct 2016 12:26:20 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/client/</guid>
      <description>Introduction In microservices architecture, service to service communication can be done by request/response style or messaging/event style. An efficient http client is crucial in request/response style as the number of interactions between services are high and extra latency can kill the entire application performance to cause the failure of microservices application.
In the early day of light-4j we have a client module based on Apache HttpClient and Apache HttpAsyncClient which supports HTTP 1.</description>
    </item>
    
    <item>
      <title>Security</title>
      <link>https://networknt.github.io/other/security/</link>
      <pubDate>Wed, 12 Oct 2016 19:07:43 -0400</pubDate>
      
      <guid>https://networknt.github.io/other/security/</guid>
      <description>The current framework supports OAuth2 with JWT token but can be extended to other authentication and authorization approaches.
light-oauth2 server By default, the framework contains two pairs of public key certificates issued by our own oauth2 server which can be installed from docker. For more info, please refer to https://github.com/networknt/light-oauth2
Kid Since services are deployed in the cloud without static IP, the traditional push certificates to each service is not working anymore.</description>
    </item>
    
  </channel>
</rss>